# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - develop

# pool:
#   vmImage: ubuntu-latest

# variables:
#   # azureSubscriptionEndpoint: $(service-connection-name)
#   # azureContainerRegistry: $(container-registry-host)
#   # registryName: $(azureContainerRegistry)/$(Build.Repository.Name)
#   imageName: ssp-test:$(Build.BuildId)
  

# # steps:
# # - script: echo Hello, world!
# #   displayName: 'Run a one-line script'

# # - script: |
# #     echo Add other tasks to build, test, and deploy your project.
# #     echo See https://aka.ms/yaml
# #   displayName: 'Run a multi-line script'



# # ----------------------------
# # Docker Image: Build and Push
# # ----------------------------
# stages:
# - stage: BuildImage
#   displayName: 'Build'
#   jobs:
#     - job: build_and_push_image
#       steps:
#       # - script: |
#       #     echo '##vso[task.setvariable variable=buildSha]'$(git rev-parse --short HEAD)''
#       #     echo 'buildSha set to $(buildSha)'
#       #   displayName: Get build git sha

#       - script: docker build --tag $(imageName) .
#         displayName: 'Docker: Build and tag image'
      
#       - script: docker images | grep ssp
#         displayName: 'List Docker Images'


# # Docker
# # Build and push an image to Azure Container Registry
# # https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- develop

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  # dockerRegistryServiceConnection: '{{ containerRegistryConnection.Id }}'
  # imageRepository: '{{#toAlphaNumericString imageRepository 50}}{{/toAlphaNumericString}}'
  # containerRegistry: '{{ containerRegistryConnection.Authorization.Parameters.loginServer }}'
  # dockerfilePath: '{{ dockerfilePath }}'
  # tag: '$(Build.BuildId)'
  imageName: ssp-test:$(Build.BuildId)

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: docker build --tag $(imageName) .
      displayName: 'Docker: Build and tag image'
    - script: docker images | grep ssp
      displayName: 'List Docker Images'
